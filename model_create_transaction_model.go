/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateTransactionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTransactionModel{}

// CreateTransactionModel Create a transaction
type CreateTransactionModel struct {
	// Company Code - The client application company reference code.
	CompanyCode string `json:"companyCode"`
	// Document Type
	Type *string `json:"type,omitempty"`
	// Transaction Code - the internal reference code used by the client application.  This is used for operations such as                  Post and GetTaxHistory.
	Code string `json:"code"`
	// Transaction Date - The date on the invoice, purchase order, etc.
	Date time.Time `json:"date"`
	// Salesperson Code - The client application salesperson reference code.
	SalespersonCode *string `json:"salespersonCode,omitempty"`
	// Customer Code - The client application customer reference code.
	CustomerCode *string `json:"customerCode,omitempty"`
	// Customer Usage Type - The client application customer or usage type.
	CustomerUsageType *string `json:"customerUsageType,omitempty"`
	// Discount - The discount amount to apply to the document.
	Discount *float64 `json:"discount,omitempty"`
	// Purchase Order Number for this document
	PurchaseOrderNo *string `json:"purchaseOrderNo,omitempty"`
	// Exemption Number for this document
	ExemptionNo *string `json:"exemptionNo,omitempty"`
	Addresses *CreateTransactionModelAddresses `json:"addresses,omitempty"`
	// Document line items list
	Lines []LineItemModel `json:"lines,omitempty"`
	// Reference Code used to reference the original document for a return invoice
	ReferenceCode *string `json:"referenceCode,omitempty"`
	// The hash code is computed by the client to determine whether any changes have occured                  since taxes were calculated.
	HashCode *int32 `json:"hashCode,omitempty"`
	// Sets the sale location code (Outlet ID) for reporting this document to the tax authority.
	ReportingLocationCode *string `json:"reportingLocationCode,omitempty"`
	// Causes the document to be committed if true.
	Commit *bool `json:"commit,omitempty"`
	// BatchCode for batch operations.
	BatchCode *string `json:"batchCode,omitempty"`
	TaxOverride *TaxOverrideModel `json:"taxOverride,omitempty"`
	// Indicates the tax effectivity override date for the entire document.
	TaxDate *time.Time `json:"taxDate,omitempty"`
	// 3 character ISO 4217 currency code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Specifies whether the tax calculation is handled Local, Remote, or Automatic (default)
	ServiceMode *string `json:"serviceMode,omitempty"`
	// Indicates the date payment was applied to this document.  This is only for cash basis accounting.
	PaymentDate *time.Time `json:"paymentDate,omitempty"`
	// Currency exchange rate from this transaction to the company base currency.
	ExchangeRate *float64 `json:"exchangeRate,omitempty"`
	// Effective date of the exchange rate.
	ExchangeRateEffectiveDate *time.Time `json:"exchangeRateEffectiveDate,omitempty"`
	// Sets the POS Lane Code sent by the User for this document.
	PosLaneCode *string `json:"posLaneCode,omitempty"`
	// BusinessIdentificationNo
	BusinessIdentificationNo *string `json:"businessIdentificationNo,omitempty"`
	// Specifies if the Transaction has the seller as IsSellerImporterOfRecord
	IsSellerImporterOfRecord *bool `json:"isSellerImporterOfRecord,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Email
	Email *string `json:"email,omitempty"`
}

// NewCreateTransactionModel instantiates a new CreateTransactionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTransactionModel(companyCode string, code string, date time.Time) *CreateTransactionModel {
	this := CreateTransactionModel{}
	this.CompanyCode = companyCode
	this.Code = code
	this.Date = date
	return &this
}

// NewCreateTransactionModelWithDefaults instantiates a new CreateTransactionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTransactionModelWithDefaults() *CreateTransactionModel {
	this := CreateTransactionModel{}
	return &this
}

// GetCompanyCode returns the CompanyCode field value
func (o *CreateTransactionModel) GetCompanyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyCode
}

// GetCompanyCodeOk returns a tuple with the CompanyCode field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCompanyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyCode, true
}

// SetCompanyCode sets field value
func (o *CreateTransactionModel) SetCompanyCode(v string) {
	o.CompanyCode = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateTransactionModel) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value
func (o *CreateTransactionModel) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CreateTransactionModel) SetCode(v string) {
	o.Code = v
}

// GetDate returns the Date field value
func (o *CreateTransactionModel) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CreateTransactionModel) SetDate(v time.Time) {
	o.Date = v
}

// GetSalespersonCode returns the SalespersonCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetSalespersonCode() string {
	if o == nil || IsNil(o.SalespersonCode) {
		var ret string
		return ret
	}
	return *o.SalespersonCode
}

// GetSalespersonCodeOk returns a tuple with the SalespersonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetSalespersonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalespersonCode) {
		return nil, false
	}
	return o.SalespersonCode, true
}

// HasSalespersonCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasSalespersonCode() bool {
	if o != nil && !IsNil(o.SalespersonCode) {
		return true
	}

	return false
}

// SetSalespersonCode gets a reference to the given string and assigns it to the SalespersonCode field.
func (o *CreateTransactionModel) SetSalespersonCode(v string) {
	o.SalespersonCode = &v
}

// GetCustomerCode returns the CustomerCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetCustomerCode() string {
	if o == nil || IsNil(o.CustomerCode) {
		var ret string
		return ret
	}
	return *o.CustomerCode
}

// GetCustomerCodeOk returns a tuple with the CustomerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCustomerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerCode) {
		return nil, false
	}
	return o.CustomerCode, true
}

// HasCustomerCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasCustomerCode() bool {
	if o != nil && !IsNil(o.CustomerCode) {
		return true
	}

	return false
}

// SetCustomerCode gets a reference to the given string and assigns it to the CustomerCode field.
func (o *CreateTransactionModel) SetCustomerCode(v string) {
	o.CustomerCode = &v
}

// GetCustomerUsageType returns the CustomerUsageType field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetCustomerUsageType() string {
	if o == nil || IsNil(o.CustomerUsageType) {
		var ret string
		return ret
	}
	return *o.CustomerUsageType
}

// GetCustomerUsageTypeOk returns a tuple with the CustomerUsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCustomerUsageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerUsageType) {
		return nil, false
	}
	return o.CustomerUsageType, true
}

// HasCustomerUsageType returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasCustomerUsageType() bool {
	if o != nil && !IsNil(o.CustomerUsageType) {
		return true
	}

	return false
}

// SetCustomerUsageType gets a reference to the given string and assigns it to the CustomerUsageType field.
func (o *CreateTransactionModel) SetCustomerUsageType(v string) {
	o.CustomerUsageType = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetDiscount() float64 {
	if o == nil || IsNil(o.Discount) {
		var ret float64
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetDiscountOk() (*float64, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given float64 and assigns it to the Discount field.
func (o *CreateTransactionModel) SetDiscount(v float64) {
	o.Discount = &v
}

// GetPurchaseOrderNo returns the PurchaseOrderNo field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetPurchaseOrderNo() string {
	if o == nil || IsNil(o.PurchaseOrderNo) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNo
}

// GetPurchaseOrderNoOk returns a tuple with the PurchaseOrderNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetPurchaseOrderNoOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNo) {
		return nil, false
	}
	return o.PurchaseOrderNo, true
}

// HasPurchaseOrderNo returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasPurchaseOrderNo() bool {
	if o != nil && !IsNil(o.PurchaseOrderNo) {
		return true
	}

	return false
}

// SetPurchaseOrderNo gets a reference to the given string and assigns it to the PurchaseOrderNo field.
func (o *CreateTransactionModel) SetPurchaseOrderNo(v string) {
	o.PurchaseOrderNo = &v
}

// GetExemptionNo returns the ExemptionNo field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetExemptionNo() string {
	if o == nil || IsNil(o.ExemptionNo) {
		var ret string
		return ret
	}
	return *o.ExemptionNo
}

// GetExemptionNoOk returns a tuple with the ExemptionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetExemptionNoOk() (*string, bool) {
	if o == nil || IsNil(o.ExemptionNo) {
		return nil, false
	}
	return o.ExemptionNo, true
}

// HasExemptionNo returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasExemptionNo() bool {
	if o != nil && !IsNil(o.ExemptionNo) {
		return true
	}

	return false
}

// SetExemptionNo gets a reference to the given string and assigns it to the ExemptionNo field.
func (o *CreateTransactionModel) SetExemptionNo(v string) {
	o.ExemptionNo = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetAddresses() CreateTransactionModelAddresses {
	if o == nil || IsNil(o.Addresses) {
		var ret CreateTransactionModelAddresses
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetAddressesOk() (*CreateTransactionModelAddresses, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given CreateTransactionModelAddresses and assigns it to the Addresses field.
func (o *CreateTransactionModel) SetAddresses(v CreateTransactionModelAddresses) {
	o.Addresses = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetLines() []LineItemModel {
	if o == nil || IsNil(o.Lines) {
		var ret []LineItemModel
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetLinesOk() ([]LineItemModel, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []LineItemModel and assigns it to the Lines field.
func (o *CreateTransactionModel) SetLines(v []LineItemModel) {
	o.Lines = v
}

// GetReferenceCode returns the ReferenceCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetReferenceCode() string {
	if o == nil || IsNil(o.ReferenceCode) {
		var ret string
		return ret
	}
	return *o.ReferenceCode
}

// GetReferenceCodeOk returns a tuple with the ReferenceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetReferenceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceCode) {
		return nil, false
	}
	return o.ReferenceCode, true
}

// HasReferenceCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasReferenceCode() bool {
	if o != nil && !IsNil(o.ReferenceCode) {
		return true
	}

	return false
}

// SetReferenceCode gets a reference to the given string and assigns it to the ReferenceCode field.
func (o *CreateTransactionModel) SetReferenceCode(v string) {
	o.ReferenceCode = &v
}

// GetHashCode returns the HashCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetHashCode() int32 {
	if o == nil || IsNil(o.HashCode) {
		var ret int32
		return ret
	}
	return *o.HashCode
}

// GetHashCodeOk returns a tuple with the HashCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetHashCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.HashCode) {
		return nil, false
	}
	return o.HashCode, true
}

// HasHashCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasHashCode() bool {
	if o != nil && !IsNil(o.HashCode) {
		return true
	}

	return false
}

// SetHashCode gets a reference to the given int32 and assigns it to the HashCode field.
func (o *CreateTransactionModel) SetHashCode(v int32) {
	o.HashCode = &v
}

// GetReportingLocationCode returns the ReportingLocationCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetReportingLocationCode() string {
	if o == nil || IsNil(o.ReportingLocationCode) {
		var ret string
		return ret
	}
	return *o.ReportingLocationCode
}

// GetReportingLocationCodeOk returns a tuple with the ReportingLocationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetReportingLocationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingLocationCode) {
		return nil, false
	}
	return o.ReportingLocationCode, true
}

// HasReportingLocationCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasReportingLocationCode() bool {
	if o != nil && !IsNil(o.ReportingLocationCode) {
		return true
	}

	return false
}

// SetReportingLocationCode gets a reference to the given string and assigns it to the ReportingLocationCode field.
func (o *CreateTransactionModel) SetReportingLocationCode(v string) {
	o.ReportingLocationCode = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetCommit() bool {
	if o == nil || IsNil(o.Commit) {
		var ret bool
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCommitOk() (*bool, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given bool and assigns it to the Commit field.
func (o *CreateTransactionModel) SetCommit(v bool) {
	o.Commit = &v
}

// GetBatchCode returns the BatchCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetBatchCode() string {
	if o == nil || IsNil(o.BatchCode) {
		var ret string
		return ret
	}
	return *o.BatchCode
}

// GetBatchCodeOk returns a tuple with the BatchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetBatchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BatchCode) {
		return nil, false
	}
	return o.BatchCode, true
}

// HasBatchCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasBatchCode() bool {
	if o != nil && !IsNil(o.BatchCode) {
		return true
	}

	return false
}

// SetBatchCode gets a reference to the given string and assigns it to the BatchCode field.
func (o *CreateTransactionModel) SetBatchCode(v string) {
	o.BatchCode = &v
}

// GetTaxOverride returns the TaxOverride field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetTaxOverride() TaxOverrideModel {
	if o == nil || IsNil(o.TaxOverride) {
		var ret TaxOverrideModel
		return ret
	}
	return *o.TaxOverride
}

// GetTaxOverrideOk returns a tuple with the TaxOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetTaxOverrideOk() (*TaxOverrideModel, bool) {
	if o == nil || IsNil(o.TaxOverride) {
		return nil, false
	}
	return o.TaxOverride, true
}

// HasTaxOverride returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasTaxOverride() bool {
	if o != nil && !IsNil(o.TaxOverride) {
		return true
	}

	return false
}

// SetTaxOverride gets a reference to the given TaxOverrideModel and assigns it to the TaxOverride field.
func (o *CreateTransactionModel) SetTaxOverride(v TaxOverrideModel) {
	o.TaxOverride = &v
}

// GetTaxDate returns the TaxDate field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetTaxDate() time.Time {
	if o == nil || IsNil(o.TaxDate) {
		var ret time.Time
		return ret
	}
	return *o.TaxDate
}

// GetTaxDateOk returns a tuple with the TaxDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetTaxDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TaxDate) {
		return nil, false
	}
	return o.TaxDate, true
}

// HasTaxDate returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasTaxDate() bool {
	if o != nil && !IsNil(o.TaxDate) {
		return true
	}

	return false
}

// SetTaxDate gets a reference to the given time.Time and assigns it to the TaxDate field.
func (o *CreateTransactionModel) SetTaxDate(v time.Time) {
	o.TaxDate = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CreateTransactionModel) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetServiceMode returns the ServiceMode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetServiceMode() string {
	if o == nil || IsNil(o.ServiceMode) {
		var ret string
		return ret
	}
	return *o.ServiceMode
}

// GetServiceModeOk returns a tuple with the ServiceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetServiceModeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceMode) {
		return nil, false
	}
	return o.ServiceMode, true
}

// HasServiceMode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasServiceMode() bool {
	if o != nil && !IsNil(o.ServiceMode) {
		return true
	}

	return false
}

// SetServiceMode gets a reference to the given string and assigns it to the ServiceMode field.
func (o *CreateTransactionModel) SetServiceMode(v string) {
	o.ServiceMode = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetPaymentDate() time.Time {
	if o == nil || IsNil(o.PaymentDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetPaymentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given time.Time and assigns it to the PaymentDate field.
func (o *CreateTransactionModel) SetPaymentDate(v time.Time) {
	o.PaymentDate = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetExchangeRate() float64 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float64
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetExchangeRateOk() (*float64, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float64 and assigns it to the ExchangeRate field.
func (o *CreateTransactionModel) SetExchangeRate(v float64) {
	o.ExchangeRate = &v
}

// GetExchangeRateEffectiveDate returns the ExchangeRateEffectiveDate field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetExchangeRateEffectiveDate() time.Time {
	if o == nil || IsNil(o.ExchangeRateEffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.ExchangeRateEffectiveDate
}

// GetExchangeRateEffectiveDateOk returns a tuple with the ExchangeRateEffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetExchangeRateEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExchangeRateEffectiveDate) {
		return nil, false
	}
	return o.ExchangeRateEffectiveDate, true
}

// HasExchangeRateEffectiveDate returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasExchangeRateEffectiveDate() bool {
	if o != nil && !IsNil(o.ExchangeRateEffectiveDate) {
		return true
	}

	return false
}

// SetExchangeRateEffectiveDate gets a reference to the given time.Time and assigns it to the ExchangeRateEffectiveDate field.
func (o *CreateTransactionModel) SetExchangeRateEffectiveDate(v time.Time) {
	o.ExchangeRateEffectiveDate = &v
}

// GetPosLaneCode returns the PosLaneCode field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetPosLaneCode() string {
	if o == nil || IsNil(o.PosLaneCode) {
		var ret string
		return ret
	}
	return *o.PosLaneCode
}

// GetPosLaneCodeOk returns a tuple with the PosLaneCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetPosLaneCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PosLaneCode) {
		return nil, false
	}
	return o.PosLaneCode, true
}

// HasPosLaneCode returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasPosLaneCode() bool {
	if o != nil && !IsNil(o.PosLaneCode) {
		return true
	}

	return false
}

// SetPosLaneCode gets a reference to the given string and assigns it to the PosLaneCode field.
func (o *CreateTransactionModel) SetPosLaneCode(v string) {
	o.PosLaneCode = &v
}

// GetBusinessIdentificationNo returns the BusinessIdentificationNo field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetBusinessIdentificationNo() string {
	if o == nil || IsNil(o.BusinessIdentificationNo) {
		var ret string
		return ret
	}
	return *o.BusinessIdentificationNo
}

// GetBusinessIdentificationNoOk returns a tuple with the BusinessIdentificationNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetBusinessIdentificationNoOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessIdentificationNo) {
		return nil, false
	}
	return o.BusinessIdentificationNo, true
}

// HasBusinessIdentificationNo returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasBusinessIdentificationNo() bool {
	if o != nil && !IsNil(o.BusinessIdentificationNo) {
		return true
	}

	return false
}

// SetBusinessIdentificationNo gets a reference to the given string and assigns it to the BusinessIdentificationNo field.
func (o *CreateTransactionModel) SetBusinessIdentificationNo(v string) {
	o.BusinessIdentificationNo = &v
}

// GetIsSellerImporterOfRecord returns the IsSellerImporterOfRecord field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetIsSellerImporterOfRecord() bool {
	if o == nil || IsNil(o.IsSellerImporterOfRecord) {
		var ret bool
		return ret
	}
	return *o.IsSellerImporterOfRecord
}

// GetIsSellerImporterOfRecordOk returns a tuple with the IsSellerImporterOfRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetIsSellerImporterOfRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSellerImporterOfRecord) {
		return nil, false
	}
	return o.IsSellerImporterOfRecord, true
}

// HasIsSellerImporterOfRecord returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasIsSellerImporterOfRecord() bool {
	if o != nil && !IsNil(o.IsSellerImporterOfRecord) {
		return true
	}

	return false
}

// SetIsSellerImporterOfRecord gets a reference to the given bool and assigns it to the IsSellerImporterOfRecord field.
func (o *CreateTransactionModel) SetIsSellerImporterOfRecord(v bool) {
	o.IsSellerImporterOfRecord = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTransactionModel) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateTransactionModel) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionModel) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateTransactionModel) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateTransactionModel) SetEmail(v string) {
	o.Email = &v
}

func (o CreateTransactionModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTransactionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["companyCode"] = o.CompanyCode
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["code"] = o.Code
	toSerialize["date"] = o.Date
	if !IsNil(o.SalespersonCode) {
		toSerialize["salespersonCode"] = o.SalespersonCode
	}
	if !IsNil(o.CustomerCode) {
		toSerialize["customerCode"] = o.CustomerCode
	}
	if !IsNil(o.CustomerUsageType) {
		toSerialize["customerUsageType"] = o.CustomerUsageType
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.PurchaseOrderNo) {
		toSerialize["purchaseOrderNo"] = o.PurchaseOrderNo
	}
	if !IsNil(o.ExemptionNo) {
		toSerialize["exemptionNo"] = o.ExemptionNo
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.ReferenceCode) {
		toSerialize["referenceCode"] = o.ReferenceCode
	}
	if !IsNil(o.HashCode) {
		toSerialize["hashCode"] = o.HashCode
	}
	if !IsNil(o.ReportingLocationCode) {
		toSerialize["reportingLocationCode"] = o.ReportingLocationCode
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.BatchCode) {
		toSerialize["batchCode"] = o.BatchCode
	}
	if !IsNil(o.TaxOverride) {
		toSerialize["taxOverride"] = o.TaxOverride
	}
	if !IsNil(o.TaxDate) {
		toSerialize["taxDate"] = o.TaxDate
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.ServiceMode) {
		toSerialize["serviceMode"] = o.ServiceMode
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.ExchangeRateEffectiveDate) {
		toSerialize["exchangeRateEffectiveDate"] = o.ExchangeRateEffectiveDate
	}
	if !IsNil(o.PosLaneCode) {
		toSerialize["posLaneCode"] = o.PosLaneCode
	}
	if !IsNil(o.BusinessIdentificationNo) {
		toSerialize["businessIdentificationNo"] = o.BusinessIdentificationNo
	}
	if !IsNil(o.IsSellerImporterOfRecord) {
		toSerialize["isSellerImporterOfRecord"] = o.IsSellerImporterOfRecord
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableCreateTransactionModel struct {
	value *CreateTransactionModel
	isSet bool
}

func (v NullableCreateTransactionModel) Get() *CreateTransactionModel {
	return v.value
}

func (v *NullableCreateTransactionModel) Set(val *CreateTransactionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransactionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransactionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransactionModel(val *CreateTransactionModel) *NullableCreateTransactionModel {
	return &NullableCreateTransactionModel{value: val, isSet: true}
}

func (v NullableCreateTransactionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransactionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


