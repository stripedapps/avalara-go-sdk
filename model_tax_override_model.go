/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TaxOverrideModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxOverrideModel{}

// TaxOverrideModel Represents a tax override for a transaction
type TaxOverrideModel struct {
	// Identifies the type of tax override
	Type *string `json:"type,omitempty"`
	// Indicates a total override of the calculated tax on the document.  AvaTax will distribute                  the override across all the lines.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// The override tax date to use
	TaxDate *time.Time `json:"taxDate,omitempty"`
	// This provides the reason for a tax override for audit purposes.  It is required for types 2-4.
	Reason *string `json:"reason,omitempty"`
}

// NewTaxOverrideModel instantiates a new TaxOverrideModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxOverrideModel() *TaxOverrideModel {
	this := TaxOverrideModel{}
	return &this
}

// NewTaxOverrideModelWithDefaults instantiates a new TaxOverrideModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxOverrideModelWithDefaults() *TaxOverrideModel {
	this := TaxOverrideModel{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaxOverrideModel) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxOverrideModel) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaxOverrideModel) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaxOverrideModel) SetType(v string) {
	o.Type = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *TaxOverrideModel) GetTaxAmount() float64 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret float64
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxOverrideModel) GetTaxAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *TaxOverrideModel) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float64 and assigns it to the TaxAmount field.
func (o *TaxOverrideModel) SetTaxAmount(v float64) {
	o.TaxAmount = &v
}

// GetTaxDate returns the TaxDate field value if set, zero value otherwise.
func (o *TaxOverrideModel) GetTaxDate() time.Time {
	if o == nil || IsNil(o.TaxDate) {
		var ret time.Time
		return ret
	}
	return *o.TaxDate
}

// GetTaxDateOk returns a tuple with the TaxDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxOverrideModel) GetTaxDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TaxDate) {
		return nil, false
	}
	return o.TaxDate, true
}

// HasTaxDate returns a boolean if a field has been set.
func (o *TaxOverrideModel) HasTaxDate() bool {
	if o != nil && !IsNil(o.TaxDate) {
		return true
	}

	return false
}

// SetTaxDate gets a reference to the given time.Time and assigns it to the TaxDate field.
func (o *TaxOverrideModel) SetTaxDate(v time.Time) {
	o.TaxDate = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TaxOverrideModel) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxOverrideModel) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TaxOverrideModel) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TaxOverrideModel) SetReason(v string) {
	o.Reason = &v
}

func (o TaxOverrideModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxOverrideModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.TaxDate) {
		toSerialize["taxDate"] = o.TaxDate
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableTaxOverrideModel struct {
	value *TaxOverrideModel
	isSet bool
}

func (v NullableTaxOverrideModel) Get() *TaxOverrideModel {
	return v.value
}

func (v *NullableTaxOverrideModel) Set(val *TaxOverrideModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxOverrideModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxOverrideModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxOverrideModel(val *TaxOverrideModel) *NullableTaxOverrideModel {
	return &NullableTaxOverrideModel{value: val, isSet: true}
}

func (v NullableTaxOverrideModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxOverrideModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


