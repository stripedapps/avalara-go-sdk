/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxAuthorityFormModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxAuthorityFormModel{}

// TaxAuthorityFormModel Tax Authority Form Model
type TaxAuthorityFormModel struct {
	// Tax Authority Id
	TaxAuthorityId *int32 `json:"taxAuthorityId,omitempty"`
	// Form Name
	FormName string `json:"formName"`
}

// NewTaxAuthorityFormModel instantiates a new TaxAuthorityFormModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxAuthorityFormModel(formName string) *TaxAuthorityFormModel {
	this := TaxAuthorityFormModel{}
	this.FormName = formName
	return &this
}

// NewTaxAuthorityFormModelWithDefaults instantiates a new TaxAuthorityFormModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxAuthorityFormModelWithDefaults() *TaxAuthorityFormModel {
	this := TaxAuthorityFormModel{}
	return &this
}

// GetTaxAuthorityId returns the TaxAuthorityId field value if set, zero value otherwise.
func (o *TaxAuthorityFormModel) GetTaxAuthorityId() int32 {
	if o == nil || IsNil(o.TaxAuthorityId) {
		var ret int32
		return ret
	}
	return *o.TaxAuthorityId
}

// GetTaxAuthorityIdOk returns a tuple with the TaxAuthorityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxAuthorityFormModel) GetTaxAuthorityIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxAuthorityId) {
		return nil, false
	}
	return o.TaxAuthorityId, true
}

// HasTaxAuthorityId returns a boolean if a field has been set.
func (o *TaxAuthorityFormModel) HasTaxAuthorityId() bool {
	if o != nil && !IsNil(o.TaxAuthorityId) {
		return true
	}

	return false
}

// SetTaxAuthorityId gets a reference to the given int32 and assigns it to the TaxAuthorityId field.
func (o *TaxAuthorityFormModel) SetTaxAuthorityId(v int32) {
	o.TaxAuthorityId = &v
}

// GetFormName returns the FormName field value
func (o *TaxAuthorityFormModel) GetFormName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value
// and a boolean to check if the value has been set.
func (o *TaxAuthorityFormModel) GetFormNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormName, true
}

// SetFormName sets field value
func (o *TaxAuthorityFormModel) SetFormName(v string) {
	o.FormName = v
}

func (o TaxAuthorityFormModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxAuthorityFormModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxAuthorityId) {
		toSerialize["taxAuthorityId"] = o.TaxAuthorityId
	}
	toSerialize["formName"] = o.FormName
	return toSerialize, nil
}

type NullableTaxAuthorityFormModel struct {
	value *TaxAuthorityFormModel
	isSet bool
}

func (v NullableTaxAuthorityFormModel) Get() *TaxAuthorityFormModel {
	return v.value
}

func (v *NullableTaxAuthorityFormModel) Set(val *TaxAuthorityFormModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxAuthorityFormModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxAuthorityFormModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxAuthorityFormModel(val *TaxAuthorityFormModel) *NullableTaxAuthorityFormModel {
	return &NullableTaxAuthorityFormModel{value: val, isSet: true}
}

func (v NullableTaxAuthorityFormModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxAuthorityFormModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


