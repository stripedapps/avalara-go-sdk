/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TaxRatesAPIService TaxRatesAPI service
type TaxRatesAPIService service

type ApiApiV2TaxratesByaddressGetRequest struct {
	ctx context.Context
	ApiService *TaxRatesAPIService
	line1 *string
	line2 *string
	line3 *string
	city *string
	region *string
	postalCode *string
	country *string
	authorization *string
}

// The street address of the location.
func (r ApiApiV2TaxratesByaddressGetRequest) Line1(line1 string) ApiApiV2TaxratesByaddressGetRequest {
	r.line1 = &line1
	return r
}

// The street address of the location.
func (r ApiApiV2TaxratesByaddressGetRequest) Line2(line2 string) ApiApiV2TaxratesByaddressGetRequest {
	r.line2 = &line2
	return r
}

// The street address of the location.
func (r ApiApiV2TaxratesByaddressGetRequest) Line3(line3 string) ApiApiV2TaxratesByaddressGetRequest {
	r.line3 = &line3
	return r
}

// The city name of the location.
func (r ApiApiV2TaxratesByaddressGetRequest) City(city string) ApiApiV2TaxratesByaddressGetRequest {
	r.city = &city
	return r
}

// The state or region of the location
func (r ApiApiV2TaxratesByaddressGetRequest) Region(region string) ApiApiV2TaxratesByaddressGetRequest {
	r.region = &region
	return r
}

// The postal code of the location.
func (r ApiApiV2TaxratesByaddressGetRequest) PostalCode(postalCode string) ApiApiV2TaxratesByaddressGetRequest {
	r.postalCode = &postalCode
	return r
}

// The two letter ISO-3166 country code.
func (r ApiApiV2TaxratesByaddressGetRequest) Country(country string) ApiApiV2TaxratesByaddressGetRequest {
	r.country = &country
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2TaxratesByaddressGetRequest) Authorization(authorization string) ApiApiV2TaxratesByaddressGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2TaxratesByaddressGetRequest) Execute() (*TaxRateModel, *http.Response, error) {
	return r.ApiService.ApiV2TaxratesByaddressGetExecute(r)
}

/*
ApiV2TaxratesByaddressGet Retrieve tax rates for a specified address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TaxratesByaddressGetRequest
*/
func (a *TaxRatesAPIService) ApiV2TaxratesByaddressGet(ctx context.Context) ApiApiV2TaxratesByaddressGetRequest {
	return ApiApiV2TaxratesByaddressGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaxRateModel
func (a *TaxRatesAPIService) ApiV2TaxratesByaddressGetExecute(r ApiApiV2TaxratesByaddressGetRequest) (*TaxRateModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxRateModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRatesAPIService.ApiV2TaxratesByaddressGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/taxrates/byaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.line1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "line1", r.line1, "")
	}
	if r.line2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "line2", r.line2, "")
	}
	if r.line3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "line3", r.line3, "")
	}
	if r.city != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "city", r.city, "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "")
	}
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
	}
	if r.country != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "country", r.country, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TaxratesBypostalcodeGetRequest struct {
	ctx context.Context
	ApiService *TaxRatesAPIService
	country *string
	postalCode *string
	authorization *string
}

// The two letter ISO-3166 country code.
func (r ApiApiV2TaxratesBypostalcodeGetRequest) Country(country string) ApiApiV2TaxratesBypostalcodeGetRequest {
	r.country = &country
	return r
}

// The postal code of the location.
func (r ApiApiV2TaxratesBypostalcodeGetRequest) PostalCode(postalCode string) ApiApiV2TaxratesBypostalcodeGetRequest {
	r.postalCode = &postalCode
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2TaxratesBypostalcodeGetRequest) Authorization(authorization string) ApiApiV2TaxratesBypostalcodeGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2TaxratesBypostalcodeGetRequest) Execute() (*TaxRateModel, *http.Response, error) {
	return r.ApiService.ApiV2TaxratesBypostalcodeGetExecute(r)
}

/*
ApiV2TaxratesBypostalcodeGet Retrieve tax rates for a specified country and postal code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TaxratesBypostalcodeGetRequest
*/
func (a *TaxRatesAPIService) ApiV2TaxratesBypostalcodeGet(ctx context.Context) ApiApiV2TaxratesBypostalcodeGetRequest {
	return ApiApiV2TaxratesBypostalcodeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaxRateModel
func (a *TaxRatesAPIService) ApiV2TaxratesBypostalcodeGetExecute(r ApiApiV2TaxratesBypostalcodeGetRequest) (*TaxRateModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxRateModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRatesAPIService.ApiV2TaxratesBypostalcodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/taxrates/bypostalcode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.country != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "country", r.country, "")
	}
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
