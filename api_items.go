/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ItemsAPIService ItemsAPI service
type ItemsAPIService service

type ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	companyId int32
	id int32
	authorization *string
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest) Authorization(authorization string) ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest) Execute() (*ErrorResult, *http.Response, error) {
	return r.ApiService.ApiV2CompaniesByCompanyIdItemsByIdDeleteExecute(r)
}

/*
ApiV2CompaniesByCompanyIdItemsByIdDelete Delete a single item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId The ID of the company that owns this item.
 @param id The ID of the item you wish to delete.
 @return ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest
*/
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdDelete(ctx context.Context, companyId int32, id int32) ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest {
	return ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		id: id,
	}
}

// Execute executes the request
//  @return ErrorResult
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdDeleteExecute(r ApiApiV2CompaniesByCompanyIdItemsByIdDeleteRequest) (*ErrorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ErrorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2CompaniesByCompanyIdItemsByIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companies/{companyId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	companyId int32
	id int32
	authorization *string
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest) Authorization(authorization string) ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest) Execute() (*ItemModel, *http.Response, error) {
	return r.ApiService.ApiV2CompaniesByCompanyIdItemsByIdGetExecute(r)
}

/*
ApiV2CompaniesByCompanyIdItemsByIdGet Retrieve a single item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId The ID of the company that owns this item object
 @param id The primary key of this item
 @return ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest
*/
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdGet(ctx context.Context, companyId int32, id int32) ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest {
	return ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		id: id,
	}
}

// Execute executes the request
//  @return ItemModel
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdGetExecute(r ApiApiV2CompaniesByCompanyIdItemsByIdGetRequest) (*ItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2CompaniesByCompanyIdItemsByIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companies/{companyId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	companyId int32
	id int32
	authorization *string
	model *ItemModel
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest) Authorization(authorization string) ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest {
	r.authorization = &authorization
	return r
}

// The item object you wish to update.
func (r ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest) Model(model ItemModel) ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest {
	r.model = &model
	return r
}

func (r ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest) Execute() (*ItemModel, *http.Response, error) {
	return r.ApiService.ApiV2CompaniesByCompanyIdItemsByIdPutExecute(r)
}

/*
ApiV2CompaniesByCompanyIdItemsByIdPut Update a single item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId The ID of the company that this item belongs to.
 @param id The ID of the item you wish to update
 @return ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest
*/
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdPut(ctx context.Context, companyId int32, id int32) ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest {
	return ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		id: id,
	}
}

// Execute executes the request
//  @return ItemModel
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsByIdPutExecute(r ApiApiV2CompaniesByCompanyIdItemsByIdPutRequest) (*ItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2CompaniesByCompanyIdItemsByIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companies/{companyId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	// body params
	localVarPostBody = r.model
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2CompaniesByCompanyIdItemsGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	companyId int32
	filter *string
	top *int32
	skip *int32
	orderBy *string
	authorization *string
}

// A filter statement to identify specific records to retrieve, as defined by https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering .
func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) Filter(filter string) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	r.filter = &filter
	return r
}

// If nonzero, return no more than this number of results.
func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) Top(top int32) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	r.top = &top
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) Skip(skip int32) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	r.skip = &skip
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) OrderBy(orderBy string) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) Authorization(authorization string) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2CompaniesByCompanyIdItemsGetRequest) Execute() (*FetchResultItemModel, *http.Response, error) {
	return r.ApiService.ApiV2CompaniesByCompanyIdItemsGetExecute(r)
}

/*
ApiV2CompaniesByCompanyIdItemsGet Retrieve items for this company

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId The ID of the company that owns these items
 @return ApiApiV2CompaniesByCompanyIdItemsGetRequest
*/
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsGet(ctx context.Context, companyId int32) ApiApiV2CompaniesByCompanyIdItemsGetRequest {
	return ApiApiV2CompaniesByCompanyIdItemsGetRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
	}
}

// Execute executes the request
//  @return FetchResultItemModel
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsGetExecute(r ApiApiV2CompaniesByCompanyIdItemsGetRequest) (*FetchResultItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchResultItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2CompaniesByCompanyIdItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companies/{companyId}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$top", r.top, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderBy", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2CompaniesByCompanyIdItemsPostRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	companyId int32
	authorization *string
	models *[]ItemModel
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2CompaniesByCompanyIdItemsPostRequest) Authorization(authorization string) ApiApiV2CompaniesByCompanyIdItemsPostRequest {
	r.authorization = &authorization
	return r
}

// The item you wish to create.
func (r ApiApiV2CompaniesByCompanyIdItemsPostRequest) Models(models []ItemModel) ApiApiV2CompaniesByCompanyIdItemsPostRequest {
	r.models = &models
	return r
}

func (r ApiApiV2CompaniesByCompanyIdItemsPostRequest) Execute() ([]ItemModel, *http.Response, error) {
	return r.ApiService.ApiV2CompaniesByCompanyIdItemsPostExecute(r)
}

/*
ApiV2CompaniesByCompanyIdItemsPost Create a new item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId The ID of the company that owns this item.
 @return ApiApiV2CompaniesByCompanyIdItemsPostRequest
*/
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsPost(ctx context.Context, companyId int32) ApiApiV2CompaniesByCompanyIdItemsPostRequest {
	return ApiApiV2CompaniesByCompanyIdItemsPostRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
	}
}

// Execute executes the request
//  @return []ItemModel
func (a *ItemsAPIService) ApiV2CompaniesByCompanyIdItemsPostExecute(r ApiApiV2CompaniesByCompanyIdItemsPostRequest) ([]ItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2CompaniesByCompanyIdItemsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companies/{companyId}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	// body params
	localVarPostBody = r.models
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ItemsGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	filter *string
	top *int32
	skip *int32
	orderBy *string
	authorization *string
}

// A filter statement to identify specific records to retrieve, as defined by https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering .
func (r ApiApiV2ItemsGetRequest) Filter(filter string) ApiApiV2ItemsGetRequest {
	r.filter = &filter
	return r
}

// If nonzero, return no more than this number of results.
func (r ApiApiV2ItemsGetRequest) Top(top int32) ApiApiV2ItemsGetRequest {
	r.top = &top
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2ItemsGetRequest) Skip(skip int32) ApiApiV2ItemsGetRequest {
	r.skip = &skip
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2ItemsGetRequest) OrderBy(orderBy string) ApiApiV2ItemsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2ItemsGetRequest) Authorization(authorization string) ApiApiV2ItemsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2ItemsGetRequest) Execute() (*FetchResultItemModel, *http.Response, error) {
	return r.ApiService.ApiV2ItemsGetExecute(r)
}

/*
ApiV2ItemsGet Retrieve all items

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ItemsGetRequest
*/
func (a *ItemsAPIService) ApiV2ItemsGet(ctx context.Context) ApiApiV2ItemsGetRequest {
	return ApiApiV2ItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchResultItemModel
func (a *ItemsAPIService) ApiV2ItemsGetExecute(r ApiApiV2ItemsGetRequest) (*FetchResultItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchResultItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.ApiV2ItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$top", r.top, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderBy", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
