/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionsAPIService SubscriptionsAPI service
type SubscriptionsAPIService service

type ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	accountId int32
	id int32
	authorization *string
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest) Authorization(authorization string) ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest) Execute() (*ErrorResult, *http.Response, error) {
	return r.ApiService.ApiV2AccountsByAccountIdSubscriptionsByIdDeleteExecute(r)
}

/*
ApiV2AccountsByAccountIdSubscriptionsByIdDelete Delete a single subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account that owns this subscription.
 @param id The ID of the subscription you wish to delete.
 @return ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest
*/
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdDelete(ctx context.Context, accountId int32, id int32) ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest {
	return ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		id: id,
	}
}

// Execute executes the request
//  @return ErrorResult
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdDeleteExecute(r ApiApiV2AccountsByAccountIdSubscriptionsByIdDeleteRequest) (*ErrorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ErrorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2AccountsByAccountIdSubscriptionsByIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/accounts/{accountId}/subscriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	accountId int32
	id int32
	authorization *string
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest) Authorization(authorization string) ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest) Execute() (*SubscriptionModel, *http.Response, error) {
	return r.ApiService.ApiV2AccountsByAccountIdSubscriptionsByIdGetExecute(r)
}

/*
ApiV2AccountsByAccountIdSubscriptionsByIdGet Retrieve a single subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account that owns this subscription
 @param id The primary key of this subscription
 @return ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest
*/
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdGet(ctx context.Context, accountId int32, id int32) ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest {
	return ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionModel
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdGetExecute(r ApiApiV2AccountsByAccountIdSubscriptionsByIdGetRequest) (*SubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2AccountsByAccountIdSubscriptionsByIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/accounts/{accountId}/subscriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	accountId int32
	id int32
	authorization *string
	model *SubscriptionModel
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest) Authorization(authorization string) ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest {
	r.authorization = &authorization
	return r
}

// The subscription you wish to update.
func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest) Model(model SubscriptionModel) ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest {
	r.model = &model
	return r
}

func (r ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest) Execute() (*SubscriptionModel, *http.Response, error) {
	return r.ApiService.ApiV2AccountsByAccountIdSubscriptionsByIdPutExecute(r)
}

/*
ApiV2AccountsByAccountIdSubscriptionsByIdPut Update a single subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account that this subscription belongs to.
 @param id The ID of the subscription you wish to update
 @return ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest
*/
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdPut(ctx context.Context, accountId int32, id int32) ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest {
	return ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionModel
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsByIdPutExecute(r ApiApiV2AccountsByAccountIdSubscriptionsByIdPutRequest) (*SubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2AccountsByAccountIdSubscriptionsByIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/accounts/{accountId}/subscriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	// body params
	localVarPostBody = r.model
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2AccountsByAccountIdSubscriptionsGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	accountId int32
	filter *string
	top *int32
	skip *int32
	orderBy *string
	authorization *string
}

// A filter statement to identify specific records to retrieve, as defined by https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering .
func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) Filter(filter string) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	r.filter = &filter
	return r
}

// If nonzero, return no more than this number of results.
func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) Top(top int32) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	r.top = &top
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) Skip(skip int32) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	r.skip = &skip
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) OrderBy(orderBy string) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) Authorization(authorization string) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) Execute() (*FetchResultSubscriptionModel, *http.Response, error) {
	return r.ApiService.ApiV2AccountsByAccountIdSubscriptionsGetExecute(r)
}

/*
ApiV2AccountsByAccountIdSubscriptionsGet Retrieve subscriptions for this account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account that owns these subscriptions
 @return ApiApiV2AccountsByAccountIdSubscriptionsGetRequest
*/
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsGet(ctx context.Context, accountId int32) ApiApiV2AccountsByAccountIdSubscriptionsGetRequest {
	return ApiApiV2AccountsByAccountIdSubscriptionsGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return FetchResultSubscriptionModel
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsGetExecute(r ApiApiV2AccountsByAccountIdSubscriptionsGetRequest) (*FetchResultSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchResultSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2AccountsByAccountIdSubscriptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/accounts/{accountId}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$top", r.top, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderBy", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2AccountsByAccountIdSubscriptionsPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	accountId int32
	authorization *string
	models *[]SubscriptionModel
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2AccountsByAccountIdSubscriptionsPostRequest) Authorization(authorization string) ApiApiV2AccountsByAccountIdSubscriptionsPostRequest {
	r.authorization = &authorization
	return r
}

// The subscription you wish to create.
func (r ApiApiV2AccountsByAccountIdSubscriptionsPostRequest) Models(models []SubscriptionModel) ApiApiV2AccountsByAccountIdSubscriptionsPostRequest {
	r.models = &models
	return r
}

func (r ApiApiV2AccountsByAccountIdSubscriptionsPostRequest) Execute() ([]SubscriptionModel, *http.Response, error) {
	return r.ApiService.ApiV2AccountsByAccountIdSubscriptionsPostExecute(r)
}

/*
ApiV2AccountsByAccountIdSubscriptionsPost Create a new subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account that owns this subscription.
 @return ApiApiV2AccountsByAccountIdSubscriptionsPostRequest
*/
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsPost(ctx context.Context, accountId int32) ApiApiV2AccountsByAccountIdSubscriptionsPostRequest {
	return ApiApiV2AccountsByAccountIdSubscriptionsPostRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return []SubscriptionModel
func (a *SubscriptionsAPIService) ApiV2AccountsByAccountIdSubscriptionsPostExecute(r ApiApiV2AccountsByAccountIdSubscriptionsPostRequest) ([]SubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2AccountsByAccountIdSubscriptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/accounts/{accountId}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	// body params
	localVarPostBody = r.models
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SubscriptionsGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionsAPIService
	filter *string
	top *int32
	skip *int32
	orderBy *string
	authorization *string
}

// A filter statement to identify specific records to retrieve, as defined by https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering .
func (r ApiApiV2SubscriptionsGetRequest) Filter(filter string) ApiApiV2SubscriptionsGetRequest {
	r.filter = &filter
	return r
}

// If nonzero, return no more than this number of results.
func (r ApiApiV2SubscriptionsGetRequest) Top(top int32) ApiApiV2SubscriptionsGetRequest {
	r.top = &top
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2SubscriptionsGetRequest) Skip(skip int32) ApiApiV2SubscriptionsGetRequest {
	r.skip = &skip
	return r
}

// A comma separated list of sort statements in the format &#39;(fieldname) [ASC|DESC]&#39;, for example &#39;id ASC&#39;.
func (r ApiApiV2SubscriptionsGetRequest) OrderBy(orderBy string) ApiApiV2SubscriptionsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Account Services v2 supports three types of authentication: OpenID bearer token (recommended), basic license key, and basic password:                      &lt;ul&gt;                          &lt;li&gt;Bearer [accessToken]&lt;/li&gt;                          &lt;li&gt;Basic [accountId]:[licenseKey]&lt;/li&gt;                          &lt;li&gt;Basic [userName]:[password]&lt;/li&gt;                      &lt;/ul&gt;                      Please note that for Basic methods, you must encode the right side of the string in Base64.
func (r ApiApiV2SubscriptionsGetRequest) Authorization(authorization string) ApiApiV2SubscriptionsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiApiV2SubscriptionsGetRequest) Execute() (*FetchResultSubscriptionModel, *http.Response, error) {
	return r.ApiService.ApiV2SubscriptionsGetExecute(r)
}

/*
ApiV2SubscriptionsGet Retrieve all subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SubscriptionsGetRequest
*/
func (a *SubscriptionsAPIService) ApiV2SubscriptionsGet(ctx context.Context) ApiApiV2SubscriptionsGetRequest {
	return ApiApiV2SubscriptionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchResultSubscriptionModel
func (a *SubscriptionsAPIService) ApiV2SubscriptionsGetExecute(r ApiApiV2SubscriptionsGetRequest) (*FetchResultSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchResultSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsAPIService.ApiV2SubscriptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$top", r.top, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderBy", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeySecurity"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
