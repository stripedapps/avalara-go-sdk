/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorDetail{}

// ErrorDetail Message object
type ErrorDetail struct {
	// Error message identifier
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// Concise summary of the message
	Summary *string `json:"summary,omitempty"`
	// Message details
	Details *string `json:"details,omitempty"`
	// Indicates the SoapFault code
	FaultCode *string `json:"faultCode,omitempty"`
	// URL to help for this message
	HelpLink *string `json:"helpLink,omitempty"`
	// Name of the message.
	Name *string `json:"name,omitempty"`
	// Item the message refers to, if applicable.  This is used to indicate a missing or incorrect value.
	RefersTo *string `json:"refersTo,omitempty"`
	// Severity of the message
	Severity *string `json:"severity,omitempty"`
	// Source of the message
	Source *string `json:"source,omitempty"`
	// Documentation of the message
	Documentation *string `json:"documentation,omitempty"`
}

// NewErrorDetail instantiates a new ErrorDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDetail() *ErrorDetail {
	this := ErrorDetail{}
	return &this
}

// NewErrorDetailWithDefaults instantiates a new ErrorDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDetailWithDefaults() *ErrorDetail {
	this := ErrorDetail{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ErrorDetail) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorDetail) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *ErrorDetail) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ErrorDetail) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ErrorDetail) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ErrorDetail) SetSummary(v string) {
	o.Summary = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ErrorDetail) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorDetail) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *ErrorDetail) SetDetails(v string) {
	o.Details = &v
}

// GetFaultCode returns the FaultCode field value if set, zero value otherwise.
func (o *ErrorDetail) GetFaultCode() string {
	if o == nil || IsNil(o.FaultCode) {
		var ret string
		return ret
	}
	return *o.FaultCode
}

// GetFaultCodeOk returns a tuple with the FaultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetFaultCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FaultCode) {
		return nil, false
	}
	return o.FaultCode, true
}

// HasFaultCode returns a boolean if a field has been set.
func (o *ErrorDetail) HasFaultCode() bool {
	if o != nil && !IsNil(o.FaultCode) {
		return true
	}

	return false
}

// SetFaultCode gets a reference to the given string and assigns it to the FaultCode field.
func (o *ErrorDetail) SetFaultCode(v string) {
	o.FaultCode = &v
}

// GetHelpLink returns the HelpLink field value if set, zero value otherwise.
func (o *ErrorDetail) GetHelpLink() string {
	if o == nil || IsNil(o.HelpLink) {
		var ret string
		return ret
	}
	return *o.HelpLink
}

// GetHelpLinkOk returns a tuple with the HelpLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetHelpLinkOk() (*string, bool) {
	if o == nil || IsNil(o.HelpLink) {
		return nil, false
	}
	return o.HelpLink, true
}

// HasHelpLink returns a boolean if a field has been set.
func (o *ErrorDetail) HasHelpLink() bool {
	if o != nil && !IsNil(o.HelpLink) {
		return true
	}

	return false
}

// SetHelpLink gets a reference to the given string and assigns it to the HelpLink field.
func (o *ErrorDetail) SetHelpLink(v string) {
	o.HelpLink = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ErrorDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ErrorDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ErrorDetail) SetName(v string) {
	o.Name = &v
}

// GetRefersTo returns the RefersTo field value if set, zero value otherwise.
func (o *ErrorDetail) GetRefersTo() string {
	if o == nil || IsNil(o.RefersTo) {
		var ret string
		return ret
	}
	return *o.RefersTo
}

// GetRefersToOk returns a tuple with the RefersTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetRefersToOk() (*string, bool) {
	if o == nil || IsNil(o.RefersTo) {
		return nil, false
	}
	return o.RefersTo, true
}

// HasRefersTo returns a boolean if a field has been set.
func (o *ErrorDetail) HasRefersTo() bool {
	if o != nil && !IsNil(o.RefersTo) {
		return true
	}

	return false
}

// SetRefersTo gets a reference to the given string and assigns it to the RefersTo field.
func (o *ErrorDetail) SetRefersTo(v string) {
	o.RefersTo = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ErrorDetail) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ErrorDetail) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *ErrorDetail) SetSeverity(v string) {
	o.Severity = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ErrorDetail) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ErrorDetail) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ErrorDetail) SetSource(v string) {
	o.Source = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *ErrorDetail) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetail) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *ErrorDetail) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *ErrorDetail) SetDocumentation(v string) {
	o.Documentation = &v
}

func (o ErrorDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.FaultCode) {
		toSerialize["faultCode"] = o.FaultCode
	}
	if !IsNil(o.HelpLink) {
		toSerialize["helpLink"] = o.HelpLink
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RefersTo) {
		toSerialize["refersTo"] = o.RefersTo
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	return toSerialize, nil
}

type NullableErrorDetail struct {
	value *ErrorDetail
	isSet bool
}

func (v NullableErrorDetail) Get() *ErrorDetail {
	return v.value
}

func (v *NullableErrorDetail) Set(val *ErrorDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDetail(val *ErrorDetail) *NullableErrorDetail {
	return &NullableErrorDetail{value: val, isSet: true}
}

func (v NullableErrorDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


