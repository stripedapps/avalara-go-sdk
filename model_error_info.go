/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorInfo{}

// ErrorInfo Information about the error that occurred
type ErrorInfo struct {
	// Category of the error
	Code *string `json:"code,omitempty"`
	// Short one-line message to summaryize what went wrong
	Message *string `json:"message,omitempty"`
	// What object or service caused the error?
	Target *string `json:"target,omitempty"`
	// Array of detailed error messages
	Details []ErrorDetail `json:"details,omitempty"`
}

// NewErrorInfo instantiates a new ErrorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorInfo() *ErrorInfo {
	this := ErrorInfo{}
	return &this
}

// NewErrorInfoWithDefaults instantiates a new ErrorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorInfoWithDefaults() *ErrorInfo {
	this := ErrorInfo{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorInfo) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorInfo) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorInfo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorInfo) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorInfo) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorInfo) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorInfo) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorInfo) SetMessage(v string) {
	o.Message = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *ErrorInfo) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorInfo) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *ErrorInfo) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *ErrorInfo) SetTarget(v string) {
	o.Target = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ErrorInfo) GetDetails() []ErrorDetail {
	if o == nil || IsNil(o.Details) {
		var ret []ErrorDetail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorInfo) GetDetailsOk() ([]ErrorDetail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorInfo) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ErrorDetail and assigns it to the Details field.
func (o *ErrorInfo) SetDetails(v []ErrorDetail) {
	o.Details = v
}

func (o ErrorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableErrorInfo struct {
	value *ErrorInfo
	isSet bool
}

func (v NullableErrorInfo) Get() *ErrorInfo {
	return v.value
}

func (v *NullableErrorInfo) Set(val *ErrorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorInfo(val *ErrorInfo) *NullableErrorInfo {
	return &NullableErrorInfo{value: val, isSet: true}
}

func (v NullableErrorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


