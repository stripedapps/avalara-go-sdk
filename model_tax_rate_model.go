/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxRateModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxRateModel{}

// TaxRateModel Tax Rate Model
type TaxRateModel struct {
	// Total Rate
	TotalRate *float64 `json:"totalRate,omitempty"`
	// Rates
	Rates []RateModel `json:"rates,omitempty"`
}

// NewTaxRateModel instantiates a new TaxRateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxRateModel() *TaxRateModel {
	this := TaxRateModel{}
	return &this
}

// NewTaxRateModelWithDefaults instantiates a new TaxRateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxRateModelWithDefaults() *TaxRateModel {
	this := TaxRateModel{}
	return &this
}

// GetTotalRate returns the TotalRate field value if set, zero value otherwise.
func (o *TaxRateModel) GetTotalRate() float64 {
	if o == nil || IsNil(o.TotalRate) {
		var ret float64
		return ret
	}
	return *o.TotalRate
}

// GetTotalRateOk returns a tuple with the TotalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRateModel) GetTotalRateOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalRate) {
		return nil, false
	}
	return o.TotalRate, true
}

// HasTotalRate returns a boolean if a field has been set.
func (o *TaxRateModel) HasTotalRate() bool {
	if o != nil && !IsNil(o.TotalRate) {
		return true
	}

	return false
}

// SetTotalRate gets a reference to the given float64 and assigns it to the TotalRate field.
func (o *TaxRateModel) SetTotalRate(v float64) {
	o.TotalRate = &v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *TaxRateModel) GetRates() []RateModel {
	if o == nil || IsNil(o.Rates) {
		var ret []RateModel
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRateModel) GetRatesOk() ([]RateModel, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *TaxRateModel) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []RateModel and assigns it to the Rates field.
func (o *TaxRateModel) SetRates(v []RateModel) {
	o.Rates = v
}

func (o TaxRateModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxRateModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalRate) {
		toSerialize["totalRate"] = o.TotalRate
	}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	return toSerialize, nil
}

type NullableTaxRateModel struct {
	value *TaxRateModel
	isSet bool
}

func (v NullableTaxRateModel) Get() *TaxRateModel {
	return v.value
}

func (v *NullableTaxRateModel) Set(val *TaxRateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxRateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxRateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxRateModel(val *TaxRateModel) *NullableTaxRateModel {
	return &NullableTaxRateModel{value: val, isSet: true}
}

func (v NullableTaxRateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxRateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


