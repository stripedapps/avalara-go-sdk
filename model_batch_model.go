/*
AvaTax API

REST interface to Avalara's enterprise tax service, AvaTax.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the BatchModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchModel{}

// BatchModel Represents a batch of uploaded documents
type BatchModel struct {
	// The ID number of this batch
	Id *int32 `json:"id,omitempty"`
	// The user-friendly readable name for this batch
	Name string `json:"name"`
	// The Account ID number of the account that owns this batch
	AccountId int32 `json:"accountId"`
	// The Company ID number of the company that owns this batch
	CompanyId int32 `json:"companyId"`
	// The type of this batch
	Type string `json:"type"`
	// This batch's current processing status
	Status *string `json:"status,omitempty"`
	// Any optional flags provided for this batch
	Options *string `json:"options,omitempty"`
	// The agent used to create this batch
	BatchAgent *string `json:"batchAgent,omitempty"`
	// The date/time when this batch started processing
	StartedDate *time.Time `json:"startedDate,omitempty"`
	// The number of records in this batch
	RecordCount *int32 `json:"recordCount,omitempty"`
	// The current record being processed
	CurrentRecord *int32 `json:"currentRecord,omitempty"`
	// The date/time when this batch was completely processed
	CompletedDate *time.Time `json:"completedDate,omitempty"`
	// The date when this record was created (read only)
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The User ID of the user who created this record (read only)
	CreatedUserId *int32 `json:"createdUserId,omitempty"`
	// The date/time when this record was last modified (read only)
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// The user ID of the user who last modified this record (read only)
	ModifiedUserId *int32 `json:"modifiedUserId,omitempty"`
	// The list of files contained in this batch
	Files []BatchFileModel `json:"files,omitempty"`
}

// NewBatchModel instantiates a new BatchModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchModel(name string, accountId int32, companyId int32, type_ string) *BatchModel {
	this := BatchModel{}
	this.Name = name
	this.AccountId = accountId
	this.CompanyId = companyId
	this.Type = type_
	return &this
}

// NewBatchModelWithDefaults instantiates a new BatchModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchModelWithDefaults() *BatchModel {
	this := BatchModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchModel) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BatchModel) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BatchModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BatchModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BatchModel) SetName(v string) {
	o.Name = v
}

// GetAccountId returns the AccountId field value
func (o *BatchModel) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *BatchModel) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *BatchModel) SetAccountId(v int32) {
	o.AccountId = v
}

// GetCompanyId returns the CompanyId field value
func (o *BatchModel) GetCompanyId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *BatchModel) GetCompanyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *BatchModel) SetCompanyId(v int32) {
	o.CompanyId = v
}

// GetType returns the Type field value
func (o *BatchModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BatchModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BatchModel) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchModel) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchModel) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BatchModel) SetStatus(v string) {
	o.Status = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *BatchModel) GetOptions() string {
	if o == nil || IsNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *BatchModel) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *BatchModel) SetOptions(v string) {
	o.Options = &v
}

// GetBatchAgent returns the BatchAgent field value if set, zero value otherwise.
func (o *BatchModel) GetBatchAgent() string {
	if o == nil || IsNil(o.BatchAgent) {
		var ret string
		return ret
	}
	return *o.BatchAgent
}

// GetBatchAgentOk returns a tuple with the BatchAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetBatchAgentOk() (*string, bool) {
	if o == nil || IsNil(o.BatchAgent) {
		return nil, false
	}
	return o.BatchAgent, true
}

// HasBatchAgent returns a boolean if a field has been set.
func (o *BatchModel) HasBatchAgent() bool {
	if o != nil && !IsNil(o.BatchAgent) {
		return true
	}

	return false
}

// SetBatchAgent gets a reference to the given string and assigns it to the BatchAgent field.
func (o *BatchModel) SetBatchAgent(v string) {
	o.BatchAgent = &v
}

// GetStartedDate returns the StartedDate field value if set, zero value otherwise.
func (o *BatchModel) GetStartedDate() time.Time {
	if o == nil || IsNil(o.StartedDate) {
		var ret time.Time
		return ret
	}
	return *o.StartedDate
}

// GetStartedDateOk returns a tuple with the StartedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetStartedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedDate) {
		return nil, false
	}
	return o.StartedDate, true
}

// HasStartedDate returns a boolean if a field has been set.
func (o *BatchModel) HasStartedDate() bool {
	if o != nil && !IsNil(o.StartedDate) {
		return true
	}

	return false
}

// SetStartedDate gets a reference to the given time.Time and assigns it to the StartedDate field.
func (o *BatchModel) SetStartedDate(v time.Time) {
	o.StartedDate = &v
}

// GetRecordCount returns the RecordCount field value if set, zero value otherwise.
func (o *BatchModel) GetRecordCount() int32 {
	if o == nil || IsNil(o.RecordCount) {
		var ret int32
		return ret
	}
	return *o.RecordCount
}

// GetRecordCountOk returns a tuple with the RecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordCount) {
		return nil, false
	}
	return o.RecordCount, true
}

// HasRecordCount returns a boolean if a field has been set.
func (o *BatchModel) HasRecordCount() bool {
	if o != nil && !IsNil(o.RecordCount) {
		return true
	}

	return false
}

// SetRecordCount gets a reference to the given int32 and assigns it to the RecordCount field.
func (o *BatchModel) SetRecordCount(v int32) {
	o.RecordCount = &v
}

// GetCurrentRecord returns the CurrentRecord field value if set, zero value otherwise.
func (o *BatchModel) GetCurrentRecord() int32 {
	if o == nil || IsNil(o.CurrentRecord) {
		var ret int32
		return ret
	}
	return *o.CurrentRecord
}

// GetCurrentRecordOk returns a tuple with the CurrentRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetCurrentRecordOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrentRecord) {
		return nil, false
	}
	return o.CurrentRecord, true
}

// HasCurrentRecord returns a boolean if a field has been set.
func (o *BatchModel) HasCurrentRecord() bool {
	if o != nil && !IsNil(o.CurrentRecord) {
		return true
	}

	return false
}

// SetCurrentRecord gets a reference to the given int32 and assigns it to the CurrentRecord field.
func (o *BatchModel) SetCurrentRecord(v int32) {
	o.CurrentRecord = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *BatchModel) GetCompletedDate() time.Time {
	if o == nil || IsNil(o.CompletedDate) {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *BatchModel) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *BatchModel) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *BatchModel) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *BatchModel) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *BatchModel) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetCreatedUserId returns the CreatedUserId field value if set, zero value otherwise.
func (o *BatchModel) GetCreatedUserId() int32 {
	if o == nil || IsNil(o.CreatedUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedUserId
}

// GetCreatedUserIdOk returns a tuple with the CreatedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetCreatedUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedUserId) {
		return nil, false
	}
	return o.CreatedUserId, true
}

// HasCreatedUserId returns a boolean if a field has been set.
func (o *BatchModel) HasCreatedUserId() bool {
	if o != nil && !IsNil(o.CreatedUserId) {
		return true
	}

	return false
}

// SetCreatedUserId gets a reference to the given int32 and assigns it to the CreatedUserId field.
func (o *BatchModel) SetCreatedUserId(v int32) {
	o.CreatedUserId = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *BatchModel) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *BatchModel) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *BatchModel) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetModifiedUserId returns the ModifiedUserId field value if set, zero value otherwise.
func (o *BatchModel) GetModifiedUserId() int32 {
	if o == nil || IsNil(o.ModifiedUserId) {
		var ret int32
		return ret
	}
	return *o.ModifiedUserId
}

// GetModifiedUserIdOk returns a tuple with the ModifiedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetModifiedUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedUserId) {
		return nil, false
	}
	return o.ModifiedUserId, true
}

// HasModifiedUserId returns a boolean if a field has been set.
func (o *BatchModel) HasModifiedUserId() bool {
	if o != nil && !IsNil(o.ModifiedUserId) {
		return true
	}

	return false
}

// SetModifiedUserId gets a reference to the given int32 and assigns it to the ModifiedUserId field.
func (o *BatchModel) SetModifiedUserId(v int32) {
	o.ModifiedUserId = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *BatchModel) GetFiles() []BatchFileModel {
	if o == nil || IsNil(o.Files) {
		var ret []BatchFileModel
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchModel) GetFilesOk() ([]BatchFileModel, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *BatchModel) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []BatchFileModel and assigns it to the Files field.
func (o *BatchModel) SetFiles(v []BatchFileModel) {
	o.Files = v
}

func (o BatchModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["accountId"] = o.AccountId
	toSerialize["companyId"] = o.CompanyId
	toSerialize["type"] = o.Type
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.BatchAgent) {
		toSerialize["batchAgent"] = o.BatchAgent
	}
	if !IsNil(o.StartedDate) {
		toSerialize["startedDate"] = o.StartedDate
	}
	if !IsNil(o.RecordCount) {
		toSerialize["recordCount"] = o.RecordCount
	}
	if !IsNil(o.CurrentRecord) {
		toSerialize["currentRecord"] = o.CurrentRecord
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.CreatedUserId) {
		toSerialize["createdUserId"] = o.CreatedUserId
	}
	if !IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !IsNil(o.ModifiedUserId) {
		toSerialize["modifiedUserId"] = o.ModifiedUserId
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return toSerialize, nil
}

type NullableBatchModel struct {
	value *BatchModel
	isSet bool
}

func (v NullableBatchModel) Get() *BatchModel {
	return v.value
}

func (v *NullableBatchModel) Set(val *BatchModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchModel(val *BatchModel) *NullableBatchModel {
	return &NullableBatchModel{value: val, isSet: true}
}

func (v NullableBatchModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


